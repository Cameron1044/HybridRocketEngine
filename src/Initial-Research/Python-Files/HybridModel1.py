# THIS MODEL IS FROM THE YOUTUBE CHANNEL RE
# SOURCE: https://www.youtube.com/watch?v=qbROrMtmL90&list=PLv0elJPhTU6jGtFtcuYrIKlXNs8Bqxz3S

import math
import pandas as pd 
import numpy as np 
import matplotlib as mpl 
import matplotlib.pyplot as plt 
from scipy import integrate 
import statistics
from scipy.stats import linregress 
from scipy.integrate import odeint 
import os

"SIMULATION PARAMETERS"
step = 0.01

"DIMENSIONS OF ENGINE"
t_1 = 0.15                                      # Thrust chamber length, m
Dthroat = 7.8*10**-3                            # Throat diameter, m
Dexit = 14.2*10**-3                             # Exit diameter, m

"Environmental Parameters"
g = 9.81                                        # Gravitational Acceleration, m/s^2
Pa = 101325                                     # Ambient Pressure, Pa
Ta = 300                                        # Ambient Temperature, K

"FUEL. GRAIN PARAMTERS"
k = 1.13                                        # Ratio of Specific Heats with respect to combustion products
Dint = 0.015                                    # Initial Paraffin Grain Diameter, m
pfuel = 970                                     # Paraffin's density, kg/m^g
M = 24.887                                      # Molar mass of combustion products, kg/kmol
To = 3556                                       # "Chamber temperature, K
Lgrain = 0.15                                   # Paraffin Grain Length, m
grain_radius = Dint/2                           # Paraffin grain radius, m

"OXIDISER PARAMETERS" 
oxpressure = 1956000
oxden = 25.11
i_ox_mass = 0.350                               #Initial oxidisen mass, Kg

"REGRESSION PARAMETERS" 
a = 1.32*10**(-5)
n = 0.5

"INJECTOR PARAMTERS"
Cd = 0.65                                       # "Injector's Discharge Coefficient"
IA = 0.0000106489                               # "Injector Area, m^2"
Vol = t_1 * np.pi * grain_radius ** 2           # Free chamber volume, m^3"
R = 8314/M                                      # Gas constant
out_liquid_nitrous = [0]                        # Mass of liquid nitrous oxide that escapes through the injector, kg
mass_nitrous = [0]                              # Available nitrous mass at each time instant, kg
consumed_liquid = [0]                           # Total consumed liquid nitrous at each time instant, Kg

"--------START VALUES---------"
chamber_pressure = [Pa]                         # Combustion chamber pressure, Pa 
grain_radius = [Dint/2]                         # Paraffin graih radius, m
thrust = [0]                                    # Thrust generated by the motor, N 
cf = [0]                                        # Thrust coefficient
n2o_mass_flow_rate = [0]                        # N20 Mass Flow Rate
exhaust_mass_flow_rate = [0]                    # Initial Exit Mass Flow Rate

def two_phase(x, t, a, n, k, M, R, To, Lgrain, Cd, IA, pcomb, Dthroat, Vol, T, oxden, oxpressure):
    pcomb = x[2]*M/(8314*To)
    dx0 = Cd*IA*(2*oxden*(oxpressure - x[2]))**0.5 #Mass flow rate
    dx1 = a*(dx0/(np.pi*(x[1]**2)))**n #Regression rate
    dx2 = (R*To/Vol)*(dx0 + Lgrain*2*np.pi*x[1]*(pfuel)*dx1 - x[2]*(np.pi*(Dthroat**2)/4)*((k/(R*To))*(2/(k + 1))**((k + 1)/(k - 1)))**0.5)
    dx = [dx0, dx1, dx2]
    return dx

#set up basic arrays
x = [0]
t = []
x0 = [0, grain_radius[0], chamber_pressure[0]] #oxidiser mass that flowed, grain radius, chamber pressure
ysol = []
i = 0
T = Ta

print("Two Phase Calculations....\n")

while mass_nitrous[i] < i_ox_mass:
    ysol.append(x0) # set intitial values 
    #print (ysol)
    ts = [step*i, step*(i + 1)]
    y = odeint(two_phase, x0, ts, args=(a, n, k, M, R, To, Lgrain, Cd, IA, pfuel, Dthroat, Vol, T, oxden, oxpressure)) #solve system of differential equations
    x0 = y[1, :].tolist() # set next intial value
    print(x0)
    t.append(i*step) 
    x.append(i*step)
    i = i + 1
    out_liquid_nitrous.append(x0[0] - consumed_liquid[i - 1])
    mass_nitrous.append(mass_nitrous[i - 1] + out_liquid_nitrous[i])
    #print (mass_nitrous[1])
    consumed_liquid.append(x0[0])
    chamber_pressure.append(x0[2])
    grain_radius.append(x0[1])
    cf.append((((2*k**2)/(k - 1))*(2/(k + 1))**((k + 1)/(k - 1))*(1 - (Pa/chamber_pressure[i])**((k - 1)/k)))**0.5)
    thrust.append(cf[i]*(np.pi*(Dthroat**2)/4)*chamber_pressure[i])
for i in range(len(mass_nitrous) - 1):
    if i == 0:
        n2o_mass_flow_rate.append(0)
    else:
        n2o_mass_flow_rate.append((mass_nitrous[1] - mass_nitrous[i - 1])/(t[i]-t[i-1]))
a_n20 = linregress(t, mass_nitrous[0:len(t)])[0] # Average N20 flow rate 

#### Plotting outcomes ####
# Plotting Oxidizer vs Time
plt.figure(1)
plt.plot(t, consumed_liquid[0:len(t)])
plt.xlabel('Time (s)')
plt.ylabel('Mass of N20 (kg)')
plt.title('Mass of N20 vs Time')
plt.grid(True)
plt.show()

# Plotting Chamber Pressure vs Time
plt.figure(2)
plt.plot(t, chamber_pressure[0:len(t)])
plt.xlabel('Time (s)')
plt.ylabel('Chamber Pressure (Pa)')
plt.title('Chamber Pressure vs Time')
plt.grid(True)
plt.show()

# Plotting Solid Fuel Grain Radius vs Time
plt.figure(3)
plt.plot(t, grain_radius[0:len(t)])
plt.xlabel('Time (s)')
plt.ylabel('Grain Radius (m)')
plt.title('Grain Radius vs Time')
plt.grid(True)
plt.show()

# Plotting Engine Thrust vs Time
plt.figure(4)
plt.plot(t, thrust[0:len(t)])
plt.xlabel('Time (s)')
plt.ylabel('Thrust (N)')
plt.title('Thrust vs Time')
plt.grid(True)
plt.show()

# Plotting Thrust Coefficient vs Time
plt.figure(5)
plt.plot(t, cf[0:len(t)])
plt.xlabel('Time (s)')
plt.ylabel('Thrust Coefficient')
plt.title('Thrust Coefficient vs Time')
plt.grid(True)
plt.show()

# Plotting Oxidizer Flow Rate vs Time
plt.figure(6)
plt.plot(t, n2o_mass_flow_rate[0:len(t)])
plt.xlabel('Time (s)')
plt.ylabel('N20 Mass Flow Rate (kg/s)')
plt.title('N20 Mass Flow Rate vs Time')
plt.grid(True)
plt.show()